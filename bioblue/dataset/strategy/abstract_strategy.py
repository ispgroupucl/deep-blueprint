from abc import ABC, abstractmethod
from typing import Any, Dict, List, Sequence, Union
from pathlib import Path
from pytorch_lightning import LightningDataModule
import logging
import json

log = logging.getLogger(__name__)


class SetupStrategy(ABC):
    @abstractmethod
    def setup(self, train_ds, val_ds, test_ds) -> None:
        pass


class PrepareStrategy(ABC):
    def prepare_data(self, data_dir: Path) -> None:
        """ Creates a summary file with information about current files.
        
            Points specifically to the files generated by the latest strategy
            in order to be able to run multiple strategies on top of each other.
        """
        class_name = type(self).__name__
        summary = {}
        if (data_dir / "summary.json").exists():
            with open(data_dir / "summary.json") as summary_fp:
                summary = json.load(summary_fp)
            if class_name in summary:
                log.debug(f"{class_name} already in summary file")
                return

            latest_files = [data_dir / f for f in summary[summary["latest"]]["image"]]
        else:
            latest_files = None

        filenames = self.write_files(data_dir, latest_files)
        # Convert paths to string
        for dtype, filenames_dtype in filenames.items():
            filenames[dtype] = [str(f) for f in filenames_dtype]

        summary = {**summary, "latest": class_name, class_name: filenames}
        with open(data_dir / "summary.json", "w") as summary_fp:
            json.dump(
                summary, summary_fp,
            )

    @abstractmethod
    def write_files(
        self, data_dir: Path, latest_files: List[Path]
    ) -> Dict[str, List[Path]]:
        """Write files and return the list of written files."""
        raise NotImplementedError()
